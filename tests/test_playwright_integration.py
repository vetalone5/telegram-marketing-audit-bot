"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Playwright
"""
import pytest
import asyncio
from unittest.mock import patch, MagicMock

from app.features.audit.adapters.fetcher import get_content_bundle
from app.features.audit.adapters.playwright_fetcher import (
    PLAYWRIGHT_AVAILABLE, 
    PlaywrightFetcher, 
    PlaywrightConfig,
    fetch_with_playwright
)


class TestPlaywrightIntegration:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Playwright"""
    
    def test_playwright_availability_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Playwright"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
        assert isinstance(PLAYWRIGHT_AVAILABLE, bool)
        
    def test_playwright_config_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Playwright"""
        config = PlaywrightConfig()
        
        assert config.headless is True
        assert config.timeout == 30000
        assert config.wait_for_load_state == "networkidle"
        assert config.viewport is not None
        assert config.user_agent is not None
        assert "Mozilla" in config.user_agent
        
    def test_playwright_config_custom(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = PlaywrightConfig(
            headless=False,
            timeout=60000,
            viewport={"width": 1366, "height": 768}
        )
        
        assert config.headless is False
        assert config.timeout == 60000
        assert config.viewport["width"] == 1366
        
    @pytest.mark.skipif(not PLAYWRIGHT_AVAILABLE, reason="Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    @pytest.mark.asyncio
    async def test_playwright_fetcher_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright fetcher"""
        config = PlaywrightConfig()
        fetcher = PlaywrightFetcher(config)
        
        assert fetcher.config == config
        assert fetcher.browser is None
        assert fetcher.context is None
        
    @pytest.mark.skipif(not PLAYWRIGHT_AVAILABLE, reason="Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    @pytest.mark.asyncio
    async def test_playwright_context_manager(self):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ context manager"""
        config = PlaywrightConfig(headless=True)
        
        try:
            async with PlaywrightFetcher(config) as fetcher:
                assert fetcher.browser is not None
                assert fetcher.context is not None
        except Exception as e:
            # –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ CI/CD –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            pytest.skip(f"Playwright –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: {e}")
            
    def test_fetcher_fallback_behavior(self):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è fallback –≤ –æ—Å–Ω–æ–≤–Ω–æ–º fetcher"""
        # –ú–æ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Playwright
        with patch('app.features.audit.adapters.fetcher.PLAYWRIGHT_AVAILABLE', False):
            result = asyncio.run(get_content_bundle("https://example.com"))
            
            # –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP fallback
            assert result is not None
            assert result.get('method') in ['http', 'requests']
            
    @pytest.mark.skipif(not PLAYWRIGHT_AVAILABLE, reason="Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    @pytest.mark.asyncio 
    async def test_playwright_fetch_simple_page(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Playwright"""
        try:
            result = await fetch_with_playwright("https://httpbin.org/html")
            
            assert result['success'] is True
            assert result['method'] == 'playwright'
            assert result['title'] is not None
            assert result['content'] is not None
            assert result['status_code'] == 200
            
        except Exception as e:
            pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —Å Playwright: {e}")
            
    def test_main_fetcher_with_playwright_enabled(self):
        """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ fetcher —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º Playwright"""
        with patch('app.features.audit.adapters.fetcher.PLAYWRIGHT_AVAILABLE', True):
            with patch('app.core.settings.settings.USE_PLAYWRIGHT', True):
                # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Playwright
                mock_result = {
                    'url': 'https://example.com',
                    'title': 'Test Page',
                    'content': '<html>Test</html>',
                    'success': True,
                    'method': 'playwright'
                }
                
                with patch('app.features.audit.adapters.fetcher.fetch_with_playwright', 
                          return_value=asyncio.create_task(asyncio.coroutine(lambda: mock_result)())):
                    
                    result = asyncio.run(get_content_bundle("https://example.com"))
                    assert result is not None


class TestPlaywrightErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Playwright"""
    
    def test_playwright_not_available_error(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ Playwright"""
        with patch('app.features.audit.adapters.playwright_fetcher.PLAYWRIGHT_AVAILABLE', False):
            with pytest.raises(ImportError) as exc_info:
                PlaywrightFetcher()
            
            assert "Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in str(exc_info.value)
            
    @pytest.mark.skipif(not PLAYWRIGHT_AVAILABLE, reason="Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    @pytest.mark.asyncio
    async def test_playwright_invalid_url_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL"""
        try:
            result = await fetch_with_playwright("invalid-url")
            
            assert result['success'] is False
            assert 'error' in result
            assert result['method'] == 'playwright'
            
        except Exception as e:
            pytest.skip(f"–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ Playwright –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    test_integration = TestPlaywrightIntegration()
    test_integration.test_playwright_availability_check()
    print("‚úÖ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Playwright –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_integration.test_playwright_config_creation()
    print("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω")
    
    print("üéâ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä Playwright –¥–æ—Å—Ç—É–ø–µ–Ω: {PLAYWRIGHT_AVAILABLE}")